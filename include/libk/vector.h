#ifndef _VECTOR_H_
#define _VECTOR_H_

#include <libk/heap.h>
#include <libk/types.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#define DEFAULT_CAPACITY 1

// ~Generic~ vector data structure. It can store both values or pointers.
// The type-specific vector are generated by calling the GENERATE_VECTOR
// and the GENERATE_VECTOR_PTR macro.
//
// Every element added to the vector is copied into it using 
//   copy_<element_type> function
// Every element added to the vector is deleted with the vector
//   by calling delete_<element_type> function
//
// The macro will generate the new, push, pop and delete function, as follows
//
// e.g. GENERATE_VECTOR(int) will generate the functions:
//
//      static int_vector* new_int_vector();
//      static void push_int_vector(int_vector* vector, int value);
//      static bool get_int_vector(int_vector* vector, int index, int* output);
//      static bool pop_int_vector(int_vector* vector, int* output);
//      static void delete_int_vector(int_vector* vector);
//
// Given the verbosity of these functions, there are macros to make life easier
// 
// e.g. int_vector* my_vector = new_int_vector();
//      push(my_vector, 1);           - calls push_int_vector
//      get(my_vector, 5, &output);   - calls get_int_vector
//      pop(my_vector, &output)       - calls pop_int_vector
//      delete(my_vector)             - calls delete_int_vector
//
// Pointer values can be stored by adding an alias to a pointer type.

typedef struct vector {
  uint32_t size;
  uint32_t capacity;
  size_t data_size;
  void* data;
} vector __attribute__((packed));

vector* new_vector(size_t vector_size, size_t data_size);
void delete_vector(vector* vector);
void vector_resize(vector* vector);

#define push(__vector, ...) __vector->push(__vector, __VA_ARGS__)
#define get(__vector, ...) __vector->get(__vector, __VA_ARGS__)
#define pop(__vector, ...) __vector->pop(__vector, __VA_ARGS__)
#define delete(__vector) __vector->delete(__vector)

#define GENERATE_VECTOR(type)                                                  \
  typedef struct type##_vector {                                               \
    uint32_t size;                                                             \
    uint32_t capacity;                                                         \
    size_t data_size;                                                          \
    type* data;                                                                \
    void (*delete) (struct type##_vector* vector);                             \
    void (*push) (struct type##_vector* vector, type value);                   \
    bool (*get) (struct type##_vector* vector, size_t index, type* output);    \
    bool (*pop) (struct type##_vector* vector, type* output);                  \
  } type##_vector __attribute__((packed));                                     \
                                                                               \
  static void push_##type##_vector(type##_vector* vect, type value) {          \
    if (vect->size == vect->capacity) {                                        \
      vector_resize((vector*) vect);                                           \
    }                                                                          \
    copy_##type(value, &vect->data[vect->size]);                               \
    vect->size++;                                                              \
  }                                                                            \
                                                                               \
  static bool get_##type##_vector(type##_vector* vect, size_t index,           \
                                  type* output) {                              \
    if (index >= vect->size) {                                                 \
      return false;                                                            \
    }                                                                          \
                                                                               \
    *output = vect->data[index];                                               \
    return true;                                                               \
  }                                                                            \
                                                                               \
  static bool pop_##type##_vector(type##_vector* vect, type* output) {         \
    if (vect->size == 0) {                                                     \
      return false;                                                            \
    }                                                                          \
    vect->size--;                                                              \
    *output = vect->data[vect->size];                                          \
    return true;                                                               \
  }                                                                            \
                                                                               \
  static void delete_##type##_vector(type##_vector* vect) {                    \
    for (size_t i; i < vect->size; i++) {                                      \
      delete_##type(&vect->data[i]);                                           \
    }                                                                          \
    delete_vector((vector*) vect);                                             \
  }                                                                            \
                                                                               \
  static type##_vector* new_##type##_vector() {                                \
    type##_vector* vector = new_vector(                                        \
      sizeof(type##_vector), sizeof(type));                                    \
    vector->push = push_##type##_vector;                                       \
    vector->get = get_##type##_vector;                                         \
    vector->pop = pop_##type##_vector;                                         \
    vector->delete = delete_##type##_vector;                                   \
    return vector;                                                             \
  }                                                                            

GENERATE_VECTOR(int);
GENERATE_VECTOR(char);
GENERATE_VECTOR(double);
GENERATE_VECTOR(char_ptr);

#endif  // _VECTOR_H_